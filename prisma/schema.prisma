generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Appointment {
  id               String            @id @default(cuid())
  clientName       String
  clientEmail      String
  clientPhone      String
  serviceType      String?
  appointmentDate  DateTime
  appointmentTime  String
  duration         Int               @default(120)
  additionalNotes  String?
  status           AppointmentStatus @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  address          String?
  addressReference String?
  district         String?
  locationType     LocationType      @default(HOME)
  servicePrice     Float?
  totalPrice       Float?
  transportCost    Float?
  services         Json?
  totalDuration    Int?
  notifications    Notification[]
  review           Review?

  @@map("appointments")
}

model Availability {
  id        String   @id @default(cuid())
  date      DateTime @db.Date
  startTime String
  endTime   String
  available Boolean  @default(true)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, startTime, endTime])
  @@map("availability")
}

model Complaint {
  id                  String          @id @default(cuid())
  complaintNumber     String          @unique
  submissionDate      DateTime        @default(now())
  customerName        String
  customerDni         String
  customerAddress     String
  customerPhone       String
  customerEmail       String
  serviceDate         DateTime?
  serviceLocation     String?
  serviceType         String?
  serviceAmount       Float?
  complaintType       ComplaintType
  complaintDetail     String
  customerRequest     String
  hasEvidence         Boolean         @default(false)
  evidenceDescription String?
  status              ComplaintStatus @default(PENDING)
  responseDate        DateTime?
  response            String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@map("complaints")
}

model RegularAvailability {
  id           String       @id @default(cuid())
  dayOfWeek    Int
  startTime    String
  endTime      String
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  locationType LocationType @default(STUDIO)

  @@unique([dayOfWeek, startTime, endTime, locationType])
  @@map("regular_availability")
}

model SpecialDate {
  id          String   @id @default(cuid())
  date        DateTime @unique @db.Date
  isAvailable Boolean  @default(false)
  startTime   String?
  endTime     String?
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("special_dates")
}

model Notification {
  id            String           @id @default(cuid())
  type          NotificationType
  title         String
  message       String
  link          String?
  read          Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  appointmentId String?
  appointment   Appointment?     @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ErrorReport {
  id              String        @id @default(cuid())
  reportId        String        @unique
  userEmail       String?
  userName        String        @default("Usuario An√≥nimo")
  errorMessage    String
  errorStack      String?
  userAgent       String
  url             String
  timestamp       DateTime
  userDescription String
  errorType       ErrorType
  severity        ErrorSeverity
  status          ErrorStatus   @default(PENDING)
  ipAddress       String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("error_reports")
}

model Service {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  price       Float
  duration    Int
  category    ServiceCategory
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("services")
}

model TransportCost {
  id        String   @id @default(cuid())
  district  String   @unique
  cost      Float
  isActive  Boolean  @default(true)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transport_costs")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model PushSubscription {
  id          String   @id @default(cuid())
  userId      String   @unique
  endpoint    String
  p256dh      String
  auth        String
  userAgent   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("push_subscriptions")
}

enum Role {
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum LocationType {
  STUDIO
  HOME
}

enum NotificationType {
  APPOINTMENT
  SYSTEM
  REMINDER
  ALERT
}

enum ComplaintType {
  QUEJA
  RECLAMO
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ErrorType {
  RUNTIME
  NETWORK
  UI
  BOOKING
  OTHER
}

enum ErrorSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ErrorStatus {
  PENDING
  ACKNOWLEDGED
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Review {
  id            String       @id @default(cuid())
  appointmentId String       @unique
  appointment   Appointment  @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  reviewToken   String       @unique
  rating        Int?
  reviewText    String?
  reviewerName  String
  reviewerEmail String
  isPublic      Boolean      @default(false)
  status        ReviewStatus @default(PENDING)
  adminResponse String?
  respondedAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("reviews")
}

enum ServiceCategory {
  BRIDAL
  SOCIAL
  MATURE_SKIN
  HAIRSTYLE
  OTHER
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}
