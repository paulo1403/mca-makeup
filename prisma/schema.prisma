// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth.js fields
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Appointment {
  id              String            @id @default(cuid())
  clientName      String
  clientEmail     String
  clientPhone     String
  serviceType     String
  appointmentDate DateTime
  appointmentTime String
  duration        Int               @default(120) // minutes
  location        String?           @default("A domicilio")
  additionalNotes String?
  status          AppointmentStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("appointments")
}

model Availability {
  id        String   @id @default(cuid())
  date      DateTime @db.Date
  startTime String
  endTime   String
  available Boolean  @default(true)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, startTime, endTime])
  @@map("availability")
}

model Complaint {
  id                  String           @id @default(cuid())
  complaintNumber     String           @unique
  submissionDate      DateTime         @default(now())
  
  // Datos del consumidor
  customerName        String
  customerDni         String
  customerAddress     String
  customerPhone       String
  customerEmail       String
  
  // Datos del servicio
  serviceDate         DateTime?
  serviceLocation     String?
  serviceType         String?
  serviceAmount       Float?
  
  // Datos del reclamo
  complaintType       ComplaintType    // QUEJA o RECLAMO
  complaintDetail     String           @db.Text
  customerRequest     String           @db.Text
  
  // Evidencias
  hasEvidence         Boolean          @default(false)
  evidenceDescription String?          @db.Text
  
  // Estado y respuesta
  status              ComplaintStatus  @default(PENDING)
  responseDate        DateTime?
  response            String?          @db.Text
  
  // Metadata
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@map("complaints")
}

enum Role {
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ComplaintType {
  QUEJA
  RECLAMO
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}
