import { z } from 'zod';

// Mismo esquema que usa la API
const phoneSchema = z.string()
  .min(8, 'Tel√©fono inv√°lido')
  .refine((phone) => {
    // Remover espacios, guiones y s√≠mbolos para validar solo n√∫meros
    const cleanPhone = phone.replace(/[\s\-\+\(\)]/g, '');
    // Aceptar tel√©fonos peruanos: 9 d√≠gitos o con c√≥digo de pa√≠s (11-12 d√≠gitos)
    return cleanPhone.length >= 9 && cleanPhone.length <= 12 && /^\d+$/.test(cleanPhone);
  }, 'Formato de tel√©fono inv√°lido. Ej: +51 999 209 880 o 999209880');

// Casos de prueba
const testCases = [
  '+51 999 209 880',    // ‚úÖ Formato completo con c√≥digo de pa√≠s
  '999 209 880',        // ‚úÖ Formato local con espacios
  '999209880',          // ‚úÖ Formato local sin espacios
  '+51999209880',       // ‚úÖ Formato completo sin espacios
  '51999209880',        // ‚úÖ Con c√≥digo sin +
  '99920988',           // ‚ùå Muy corto (8 d√≠gitos)
  '9992098800',         // ‚úÖ 10 d√≠gitos
  '12345',              // ‚ùå Muy corto
  '+51 999 209 880 1',  // ‚ùå Muy largo
  'abc123456789',       // ‚ùå Contiene letras
  '',                   // ‚ùå Vac√≠o
];

console.log('üß™ Pruebas de validaci√≥n de tel√©fono:\n');

testCases.forEach((phone, index) => {
  try {
    phoneSchema.parse(phone);
    console.log(`‚úÖ ${index + 1}. "${phone}" - V√ÅLIDO`);
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.log(`‚ùå ${index + 1}. "${phone}" - INV√ÅLIDO: ${error.errors[0].message}`);
    }
  }
});

console.log('\nüéØ Formatos recomendados para usuarios:');
console.log('- +51 999 209 880 (con c√≥digo de pa√≠s)');
console.log('- 999 209 880 (formato local)');
console.log('- 999209880 (sin espacios)');
